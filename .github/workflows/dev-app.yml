name: Build and Deploy Docker Image to AWS ECR

on:
  push:
    branches:
      - Flask-App-demo

jobs:
  build-and-push:
    name: Build and Deploy Docker Image to AWS ECR
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    env:
      REGION: ${{ secrets.aws_region }}
      IAM_ROLE: ${{ secrets.iam_role }}
      ECR_REPO_URI: "590183814629.dkr.ecr.us-west-2.amazonaws.com/flask-app-demo"

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch all history, including tags

    - name: Set up Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.organization=my-org
          -Dsonar.projectKey=flask-app

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.IAM_ROLE }}
        role-session-name: github-actions-federation
        aws-region: ${{ env.REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ env.REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO_URI }}

    - name: Get Latest Git Tag and Commit SHA
      id: tag
      run: |
        latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        commit_sha=$(git rev-parse --short HEAD)
        tag_commitid="${latest_tag}-${commit_sha}"
        echo "tag_commitid=${tag_commitid}" >> $GITHUB_ENV

    - name: Build Docker Image
      run: |
        docker build -t flask-app-demo .

    - name: Tag Docker Image
      run: |
        docker tag flask-app-demo:latest ${{ env.ECR_REPO_URI }}:latest

    - name: Run Snyk to check Docker image for vulnerabilities
      uses: snyk/actions/docker@master
      continue-on-error: true 
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ env.ECR_REPO_URI }}:latest
        args: --severity-threshold=high

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ env.ECR_REPO_URI }}:latest

    # - name: Run a sleep command for 5 minutes
    #   run: |
    #     echo "Sleeping for 5 minutes..."
    #     sleep 300

    # - name: Tag and Push Docker Image
    #   run: |
    #     docker tag frontend:latest ${{ env.ECR_REPO_URI }}:${{ env.tag_commitid }}
    #     docker push ${{ env.ECR_REPO_URI }}:${{ env.tag_commitid }}
